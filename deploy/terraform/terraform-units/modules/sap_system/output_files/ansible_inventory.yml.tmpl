all:
  children:
    iscsi:
      hosts:
%{~ for ip_iscsi in ips_iscsi }
        ${ip_iscsi}:
          ansible_connection:  "ssh"
%{~ if iscsi.authentication.type == "key" }
          ansible_user:        "${iscsi.authentication.username}"
%{~ endif }
%{~ if iscsi.authentication.type == "password" }
          ansible_user:        "${iscsi.authentication.username}"
          ansible_ssh_pass:    "${iscsi.authentication.password}"
          ansible_become_pass: "${iscsi.authentication.password}"
%{~ endif }
%{~ endfor }

    jumpboxes_windows:
      hosts:
%{~ for jumpbox-windows in jumpboxes-windows }
        ${ips_jumpboxes_windows[index(jumpboxes-windows, jumpbox-windows)]}:
          ansible_connection:                   "winrm"
          ansible_user:                         "${jumpbox-windows.authentication.username}"
          ansible_ssh_pass:                     "${jumpbox-windows.authentication.password}"
          ansible_ssh_port:                     5986
          ansible_winrm_transport:              "ntlm"
          ansible_winrm_server_cert_validation: "ignore"
%{~ endfor }

    jumpboxes_linux:
      hosts:
%{~ for jumpbox-linux in jumpboxes-linux }
%{~ if jumpbox-linux.destroy_after_deploy != "true"}
        ${ips_jumpboxes_linux[index(jumpboxes-linux, jumpbox-linux)]}:
          ansible_connection:  "ssh"
%{~ if jumpbox-linux.authentication.type == "key" }
          ansible_user:        "${jumpbox-linux.authentication.username}"
%{~ endif }
%{~ if jumpbox-linux.authentication.type == "password" }
          ansible_user:        "${jumpbox-linux.authentication.username}"
          ansible_ssh_pass:    "${jumpbox-linux.authentication.password}"
          ansible_become_pass: "${jumpbox-linux.authentication.password}"
%{~ endif }
%{~ endif }
%{~ endfor }

    hanadbnodes:
      hosts:
%{~ for ip_dbnode-admin in ips_dbnodes_admin }
        ${ip_dbnode-admin}:
          ansible_connection:  "ssh"
%{~ if dbnodes[index(ips_dbnodes_admin, ip_dbnode-admin)].authentication.type == "key" }
          ansible_user:        "${dbnodes[index(ips_dbnodes_admin, ip_dbnode-admin)].authentication.username}"
%{~ endif }
%{~ if dbnodes[index(ips_dbnodes_admin, ip_dbnode-admin)].authentication.type == "password" }
          ansible_user:        "${dbnodes[index(ips_dbnodes_admin, ip_dbnode-admin)].authentication.username}"
          ansible_ssh_pass:    "${dbnodes[index(ips_dbnodes_admin, ip_dbnode-admin)].authentication.password}"
          ansible_become_pass: "${dbnodes[index(ips_dbnodes_admin, ip_dbnode-admin)].authentication.password}"
%{~ endif }
%{~ endfor }

    scs:
      hosts:
%{~ for ip_scs in ips_scs }
        ${ip_scs}:
          ansible_connection: "ssh"
          ansible_user:       "${application.authentication.username}"
%{~ if application.authentication.type == "password" }
          ansible_ssh_pass:    "${application.authentication.password}"
          ansible_become_pass: "${application.authentication.password}"
%{~ endif }
%{~ endfor }

    app:
      hosts:
%{~ for ip_app in ips_app }
        ${ip_app}:
          ansible_connection: "ssh"
          ansible_user:       "${application.authentication.username}"
%{~ if application.authentication.type == "password" }
          ansible_ssh_pass:    "${application.authentication.password}"
          ansible_become_pass: "${application.authentication.password}"
%{~ endif }
%{~ endfor }

    web:
      hosts:
%{~ for ip_web in ips_web }
        ${ip_web}:
          ansible_connection: "ssh"
          ansible_user:       "${application.authentication.username}"
%{~ if application.authentication.type == "password" }
          ansible_ssh_pass:    "${application.authentication.password}"
          ansible_become_pass: "${application.authentication.password}"
%{~ endif }
%{~ endfor }

    asenodes:
      hosts:
%{~ for ips_anydbnode in ips_anydbnodes }
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].platform == "ASE" }
        ${ips_anydbnode}:
          ansible_connection:  "ssh"
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.type == "key" }
          ansible_user:        "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.username}"
%{~ endif }
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.type == "password" }
          ansible_user:        "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.username}"
          ansible_ssh_pass:    "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.password}"
          ansible_become_pass: "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.password}"
%{~ endif }
%{~ endif }
%{~ endfor }

    oraclenodes:
      hosts:
%{~ for ips_anydbnode in ips_anydbnodes }
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].platform == "ORACLE" }
        ${ips_anydbnode}:
          ansible_connection:  "ssh"
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.type == "key" }
          ansible_user:        "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.username}"
%{~ endif }
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.type == "password" }
          ansible_user:        "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.username}"
          ansible_ssh_pass:    "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.password}"
          ansible_become_pass: "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.password}"
%{~ endif }
%{~ endif }
%{~ endfor }

    db2nodes:
      hosts:
%{~ for ips_anydbnode in ips_anydbnodes }
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].platform == "DB2" }
        ${ips_anydbnode}:
          ansible_connection:  "ssh"
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.type == "key" }
          ansible_user:        "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.username}"
%{~ endif }
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.type == "password" }
          ansible_user:        "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.username}"
          ansible_ssh_pass:    "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.password}"
          ansible_become_pass: "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.password}"
%{~ endif }
%{~ endif }
%{~ endfor }

    sqlservernodes:
      hosts:
%{~ for ips_anydbnode in ips_anydbnodes }
%{~ if anydbnodes[index(ips_anydbnodes, ips_anydbnode)].platform == "SQLSERVER" }
        ${ips_anydbnode}:
          ansible_connection:  "winrm"
          ansible_user:        "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.username}"
          ansible_ssh_pass:    "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.password}"
          ansible_become_pass: "${anydbnodes[index(ips_anydbnodes, ips_anydbnode)].authentication.password}"
%{~ endif }
%{~ endfor }

    # Groups below are collections of the above groups for easier reference
    all_jumpboxes:
      children:
        jumpboxes_windows:
        jumpboxes_linux:

    all_linux_servers:
      children:
        jumpboxes_linux:
        hanadbnodes:
        scs:
        app:

    # Localhost provisioning
    local:
      hosts:
        localhost:
          ansible_connection: "local"
          ansible_user:       "azureadm"
